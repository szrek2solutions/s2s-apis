openapi: 3.1.0
info:
  title: S2S RNG API (Draft)
  version: 2.0.0
  description: Szrek2Solutions Random Number Generator API.
  contact:
    url: 'http://www.szrek.com'
    email: info@szrek.com
servers:
  - description: Local Server
    url: 'http://localhost:55002/api/v2/rng'
components:
  schemas:
    ClientInfo:
      type: object
      x-internal: true
      properties:
        clientId:
          type: string
          description: Name or identifier of the client system. Optional input.
          example: GAMESERVER-1
        clientTransactionId:
          type: integer
          description: Client's unique identifier for this transaction. Optional input.
          format: int64
          example: 102030450
        clientTime:
          type: string
          format: date-time
          description: Time on the client system. Optional input.
          example: '2020-09-30T18:30:23Z'
        clientBusinessDay:
          type: integer
          description: Client's current business day. Format is YYMMDD. Optional input.
          example: 200930
    ServerInfo:
      type: object
      x-internal: true
      properties:
        serverId:
          type: string
          example: RNG-TEST-87
          description: Draw server identifier.
        serverVersion:
          type: string
          example: '9.3'
          description: Draw server version number.
      readOnly: true
    TestMode:
      type: boolean
      description: Indicates that the draw is a test only and not valid for use. Optional input.
      x-userDataIndex: 1
      x-internal: true
    DrawUser:
      type: object
      description: Draw participant's name and login time as used in the draw reports. Optional input.
      x-internal: true
      properties:
        name:
          type: string
          description: Full name of the user as it should appear in the draw reports.
          example: John Smith
        loginTime:
          type: string
          format: date-time
          description: The time that the user logged into the draw GUI. Optional input.
          example: '2020-03-15T15:47:44Z'
    DrawUsers:
      description: 'Participants conducting the draw. The first user is the Draw Manager, second user is the Draw Auditor, and third is the Draw Observer. Optional input.'
      type: array
      items:
        $ref: '#/components/schemas/DrawUser'
      x-internal: true
    Distribution:
      type: object
      description: 'Initial distribution values and depletion type. Used for TABLE products only. '
      x-examples: {}
      properties:
        values:
          type: array
          description: Initial distribution values.
          maxItems: 64
          items:
            type: integer
            example: 8
        depletionType:
          type: string
          enum:
            - NO_DEPLETION
            - DECREASE_ENTRY
            - REMOVE_ENTRY
          description: Specifies method of depletion for the distribution values.
          example: NO_DEPLETION
          readOnly: true
      x-internal: true
    Exclusions:
      type: array
      description: Values to be excluded from the generation. For non-TABLE products only. Optional input.
      uniqueItems: true
      maxItems: 65535
      example:
        - 10
        - 30
        - 53
      items:
        type: integer
    DrawMatrix:
      type: object
      description: The complete RNG parameter matrix. The product definition may or may not allow overriding of these values.
      x-internal: true
      properties:
        setSize:
          type: integer
          description: How many numbers in each set. Optional input.
          example: 6
          minimum: 1
        minValue:
          type: integer
          description: Lowest number that can be generated. Optional input.
          example: 1
        maxValue:
          type: integer
          description: Highest number that can be generated. Optional input.
          example: 49
        withReplacement:
          type: boolean
          description: True if generated numbers can be repeated within a set.
          readOnly: true
        sortOrder:
          type: string
          description: Sort order for the generated numbers within a set.
          enum:
            - UNSORTED
            - ASCENDING
          examples:
            - UNSORTED
          readOnly: true
        distribution:
          $ref: '#/components/schemas/Distribution'
    ClientData:
      type: array
      description: Optional data fields that are signed and logged. They can also be extracted and used in post-processing and reports. Optional input.
      x-internal: true
      example:
        - A data field
        - Another data field
      items:
        type: string
    UserData:
      type: array
      description: DEPRECATED. Optional text fields that are signed and logged. If used it is incompatible with many of the other Draw fields and will replace their values. Optional input.
      x-internal: true
      deprecated: true
      items:
        type: string
        example: some data field some other data
    Status:
      type: object
      description: Status code and description.
      x-internal: true
      readOnly: true
      properties:
        code:
          type: integer
          description: Numeric error or status code.
          example: 0
          x-internal: true
        description:
          type: string
          description: Short description of the error or status code.
          example: Success
          x-internal: true
    DrawInput:
      x-internal: true
      type: object
      properties:
        productId:
          type: integer
          description: Identifier of the product definition used for the draw generation. Required input.
          example: 1002
        numberOfSets:
          type: integer
          description: How many sets of numbers to generate. Optional input.
          minimum: 1
          example: 1
        drawMatrix:
          allOf:
            - $ref: '#/components/schemas/DrawMatrix'
            - type: object
              properties:
                exclusions:
                  $ref: '#/components/schemas/Exclusions'
        drawNumber:
          type: integer
          example: 1
          description: Draw number for this draw. Optional input.
          minimum: 1
        drawHash:
          type: string
          description: 'Hash of some draw data such as all bets, or a file containing draw input data. Typically SHA-1 in ASCII hex format. Optional input.'
          format: binary
          example: B63C77E06612D820BC3BE72877C74F257B562A20
        drawFile:
          type: string
          description: 'If drawHash contains a file hash, the name of the file is specified here. Mutually exclusive with drawText. Optional input.'
          example: BETS_20210312_123_LOTTO6.dat
        drawText:
          type: string
          description: An extra text string that will appear in the draw reports and is also appended to the draw report file names. Mutually exclusive with drawFile. Optional input.
          example: PROMO-1
        clientData:
          $ref: '#/components/schemas/ClientData'
        userData:
          $ref: '#/components/schemas/UserData'
      required:
        - productId
    DrawOutput:
      x-internal: true
      type: object
      properties:
        recordId:
          type: string
          description: Unique record identifier (URI) of the draw.
          example: EX191109870000000125
          readOnly: true
        recordHandle:
          type: integer
          description: A look-up handle that can optionally be used for faster verification processing.
          format: int64
          readOnly: true
        timestamp:
          type: string
          format: date-time
          description: Date and time the draw results were generated.
          example: '2020-09-30T18:30:23Z'
          readOnly: true
        sets:
          type: array
          description: Generated sets of numbers.
          items:
            type: array
            items:
              type: integer
    SecurityRequest:
      type: object
      description: 'Security blocks are used to authenticate various elements of the transaction. It can be an encrypted ICS block, product checksums, etc.'
      x-internal: true
      properties:
        id:
          type: string
          description: Security block type identifier.
          example: S2S
        version:
          type: string
          description: Format version of the security block.
          example: '1.0'
      required:
        - id
    SecurityRequests:
      type: array
      items:
        $ref: '#/components/schemas/SecurityRequest'
      x-internal: true
    SecurityBlock:
      description: 'Security blocks are used to authenticate various elements of the transaction. It can be an encrypted ICS block, product checksums, etc.'
      x-internal: true
      title: ''
      allOf:
        - $ref: '#/components/schemas/SecurityRequest'
        - type: object
          properties:
            keyId:
              type: string
              description: 'Identifier of the public key needed to verify the security block, if applicable.'
              example: 308C-1328-3940-DC32
              readOnly: true
            data:
              type: string
              description: Base 64 encoded content of the security block.
              example: VGhpcyBpcyBhbiBleGFtcGxl
              readOnly: true
    SecurityBlocks:
      type: array
      items:
        $ref: '#/components/schemas/SecurityBlock'
      x-internal: true
    ExtractFields:
      type: array
      description: Name/value pairs as would be generated in a CSV extract file.
      x-internal: true
      items:
        type: object
        description: ''
        properties:
          name:
            type: string
            description: Column name for the CSV extract field.
          value:
            type: string
            description: 'Value of the extract field, formatted for CSV.'
    FieldError:
      type: object
      description: Details about a specific field error.
      properties:
        code:
          type: string
          description: Error code name.
        message:
          type: string
          description: Additional detail about the error code.
        fieldName:
          type: string
          description: 'Name of the field that caused the error, if applicable.'
        path:
          type: string
          description: 'Path to the field that caused the error, if applicable.'
      x-internal: false
    ErrorResponse:
      description: Describes the error and any specific problems with fields in the request.
      allOf:
        - $ref: '#/components/schemas/Status'
        - type: object
          properties:
            fieldErrors:
              type: array
              items:
                $ref: '#/components/schemas/FieldError'
    NumberSet:
      type: array
      items:
        type: integer
      example:
        - 25
        - 5
        - 41
        - 17
        - 1
      x-internal: true
    NumberSets:
      type: array
      description: Numbers generated.
      items:
        $ref: '#/components/schemas/NumberSet'
      readOnly: true
      x-internal: true
    DrawProduct:
      x-internal: true
      allOf:
        - type: object
          description: Draw product details.
          properties:
            id:
              type: integer
              description: Product identifier.
              example: 1002
            name:
              type: string
              description: Product name.
              example: Lotto6
            type:
              type: string
              enum:
                - INTEGER
                - TABLE
                - LOTTO
              example: INTEGER
              description: The configured RNG algorithm type for the product.
            active:
              type: boolean
              description: True if the product is currently active.
            hash:
              type: string
              description: Hash of the product definition record.
              format: binary
              example: 12D820BC3BE7B63C77E06627B562A20877C74F25
        - $ref: '#/components/schemas/DrawMatrix'
      description: ''
    SecurityModule:
      type: object
      description: Details about the cryptographic Hardware Security Module (HSM).
      x-internal: true
      properties:
        serial:
          type: string
          description: Serial number of the HSM.
          example: 01000000F00019C8
        sequencer:
          type: integer
          description: Current sequence number on the HSM.
          example: 734595
        time:
          type: string
          description: Current real-time clock value on the HSM.
          example: '2020-09-30T18:30:23Z'
        keyId:
          type: string
          description: Current identifier of the RSA key pair on the HSM.
          example: 308C-1328-3940-DC32
  responses:
    BadRequestResponse:
      description: Bad Request
      headers: {}
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            Input Validation Failed:
              value:
                code: 999
                description: Input validation failed.
                fieldErrors:
                  - code: INVALID_VALUE
                    message: Product not found
                    fieldName: productId
                    path: 'drawRequests[1].productId'
  securitySchemes: {}
paths:
  /draws:
    parameters: []
    post:
      summary: Generate Draw Records
      operationId: post-draws
      description: 'Process a batch of one or more draw requests. Most of the defined input fields are optional, but when used they provide additional verification and security features. '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - $ref: '#/components/schemas/ClientInfo'
                  - type: object
                    properties:
                      transactionStatus:
                        allOf:
                          - $ref: '#/components/schemas/Status'
                        description: Overall status of the batch request.
                      businessDay:
                        type: integer
                        description: Business day under which the transaction was recorded. Format is YYMMDD.
                        example: 200930
                        readOnly: true
                      testMode:
                        $ref: '#/components/schemas/TestMode'
                      drawUsers:
                        $ref: '#/components/schemas/DrawUsers'
                      draws:
                        type: array
                        description: List of draw records.
                        items:
                          allOf:
                            - type: object
                              properties:
                                drawStatus:
                                  allOf:
                                    - $ref: '#/components/schemas/Status'
                                  description: Status of the draw request.
                                clientRecordId:
                                  type: string
                                  description: Client's unique identifier for this draw.
                                  example: RQID-31234545-32
                            - $ref: '#/components/schemas/DrawInput'
                            - $ref: '#/components/schemas/DrawOutput'
                            - type: object
                              properties:
                                securityBlocks:
                                  $ref: '#/components/schemas/SecurityBlocks'
              examples:
                Cash 3 Minimal:
                  value:
                    serverId: ASL-RNG-TEST (87)
                    serverVersion: '11.0'
                    businessDay: 210701
                    draws:
                      - productId: 1701
                        drawMatrix:
                          setSize: 3
                          minValue: 0
                          maxValue: 9
                          withReplacement: true
                        recordId: EX210701870000409847
                        sets:
                          - - 4
                            - 3
                            - 6
                        timeStamp: '2021-07-01T16:02:32Z'
                Cash 4 Minimal:
                  value:
                    serverId: ASL-RNG-TEST (87)
                    serverVersion: '11.0'
                    businessDay: 210701
                    draws:
                      - productId: 1702
                        drawMatrix:
                          setSize: 4
                          minValue: 0
                          maxValue: 9
                          withReplacement: true
                        recordId: EX210701870000409948
                        sets:
                          - - 4
                            - 9
                            - 2
                            - 3
                        timeStamp: '2021-07-01T16:09:02Z'
                Natural State Jackpot Minimal:
                  value:
                    serverId: ASL-RNG-TEST (87)
                    serverVersion: '11.0'
                    businessDay: 210701
                    draws:
                      - productId: 1710
                        drawMatrix:
                          setSize: 5
                          minValue: 1
                          maxValue: 39
                          withReplacement: false
                        recordId: EX210701870000410049
                        sets:
                          - - 9
                            - 10
                            - 13
                            - 17
                            - 28
                        timeStamp: '2021-07-01T16:13:04Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Input Validation Failed:
                  value:
                    code: 999
                    description: Input validation failed.
                    fieldErrors:
                      - code: INVALID_VALUE
                        message: Product not found
                        fieldName: productId
                        path: 'draw[1].productId'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ClientInfo'
                - type: object
                  properties:
                    testMode:
                      $ref: '#/components/schemas/TestMode'
                    users:
                      $ref: '#/components/schemas/DrawUsers'
                    draws:
                      type: array
                      description: List of draw requests. Required input/output.
                      minItems: 1
                      maxItems: 25
                      items:
                        allOf:
                          - type: object
                            properties:
                              clientRecordId:
                                type: string
                                description: Client's unique identifier for this draw. Optional input.
                                example: RQID-31234545-32
                          - $ref: '#/components/schemas/DrawInput'
                          - type: object
                            properties:
                              securityBlocks:
                                $ref: '#/components/schemas/SecurityRequests'
                  required:
                    - draws
            examples:
              Cash 3 Minimal:
                value:
                  draws:
                    - productId: 1701
              Cash 4 Minimal:
                value:
                  draws:
                    - productId: 1702
              Natural State Jackpot Minimal:
                value:
                  draws:
                    - productId: 1710
        description: ''
      parameters: []
      tags:
        - Draws
  /draws/verification:
    parameters: []
    post:
      summary: Verify Draw Record
      description: |-
        Verifies a previously generated draw record using the following steps:
        - Retrieves the original draw record using the provided URI.
        - Verifies that the draw record is valid and unmodified.
        - Verifies that the draw signature is valid.
        - Generates the draw results again and returns the record detail.


        The API user can then independently verify that the regenerated draw results match the original draw results.
      operationId: post-verifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - type: object
                    properties:
                      verificationStatus:
                        allOf:
                          - $ref: '#/components/schemas/Status'
                        description: Status of the verification request.
                      testMode:
                        $ref: '#/components/schemas/TestMode'
                      drawUsers:
                        $ref: '#/components/schemas/DrawUsers'
                      drawRecord:
                        allOf:
                          - $ref: '#/components/schemas/DrawInput'
                          - $ref: '#/components/schemas/DrawOutput'
                      hsm:
                        $ref: '#/components/schemas/SecurityModule'
                      extractFields:
                        $ref: '#/components/schemas/ExtractFields'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recordId:
                  type: string
                  description: The Unique Record Identifier (URI) of the record to be verified.
                  example: EX210622870000000335
                recordHandle:
                  type: string
                  description: The recordHandle that was returned in RNG response. Including this parameter may improve response time.
                  example: '184638'
              required:
                - recordId
        description: ''
      tags:
        - Draws
  /server/status:
    parameters: []
    get:
      summary: Get Server Status
      description: |-
        Get current status of the server. Returns HTTP 200 status code if the server is ready to generate, or HTTP 503 if any problems with the RNG engine have been detected. A typical cause of an 503 response is that are no HSMs connected to the draw server.

        This operation can be used by network monitoring systems to report exceptions and automatically manage load balancing.
      operationId: get-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - type: object
                    properties:
                      serverTime:
                        type: string
                        format: date-time
                        description: Current system time of the RNG server.
                        example: '2020-09-30T18:30:23Z'
                      businessDay:
                        type: integer
                        description: Current business day for this RNG server. Format is YYMMDD.
                        example: 200930
                      activeHsm:
                        description: 'Details of the currently active HSM, if any.'
                        allOf:
                          - $ref: '#/components/schemas/SecurityModule'
              examples: {}
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - type: object
                    properties:
                      serverTime:
                        type: string
                        format: date-time
                        description: Current system time of the RNG server.
                        example: '2020-09-30T18:30:23Z'
                      businessDay:
                        type: integer
                        description: Current business day for this RNG server. Format is YYMMDD.
                        example: 200930
              examples: {}
      tags:
        - Server
  /server/products:
    parameters: []
    get:
      summary: Get Draw Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - type: object
                    properties:
                      products:
                        type: array
                        description: List of configured draw products.
                        items:
                          $ref: '#/components/schemas/DrawProduct'
              examples: {}
      operationId: get-products
      description: Get list of all configured draw products on the draw server.
      tags:
        - Server
  /server/hsms:
    get:
      summary: Get Security Modules
      tags:
        - Server
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ServerInfo'
                  - type: object
                    properties:
                      hsms:
                        description: HSMs currently connected to the server.
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                active:
                                  type: boolean
                                  description: True if this is the currently active HSM.
                            - $ref: '#/components/schemas/SecurityModule'
              examples: {}
      operationId: get-hsms
      description: Get list of all current hardware security modules (HSMs) found on the draw server.
    parameters: []
security: []
tags:
  - name: Draws
    description: Operations related to draw records.
  - name: Server
    description: Operations related to draw server configuration and status.
